//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL.DBEntities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Garage_UATEntities : DbContext
    {
        public Garage_UATEntities()
            : base("name=Garage_UATEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Bay> Bays { get; set; }
        public virtual DbSet<CarInspection> CarInspections { get; set; }
        public virtual DbSet<CarInspectionDetail> CarInspectionDetails { get; set; }
        public virtual DbSet<CarInspectionMapping> CarInspectionMappings { get; set; }
        public virtual DbSet<CarNote> CarNotes { get; set; }
        public virtual DbSet<CarNotesImage> CarNotesImages { get; set; }
        public virtual DbSet<Car> Cars { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Discount> Discounts { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<ErrorLog1> ErrorLogs1 { get; set; }
        public virtual DbSet<Integration> Integrations { get; set; }
        public virtual DbSet<inv_Bill> inv_Bill { get; set; }
        public virtual DbSet<inv_BillDetail> inv_BillDetail { get; set; }
        public virtual DbSet<inv_PurchaseOrder> inv_PurchaseOrder { get; set; }
        public virtual DbSet<inv_PurchaseOrderDetail> inv_PurchaseOrderDetail { get; set; }
        public virtual DbSet<inv_Stock> inv_Stock { get; set; }
        public virtual DbSet<inv_StockIssue> inv_StockIssue { get; set; }
        public virtual DbSet<inv_StockIssueDetail> inv_StockIssueDetail { get; set; }
        public virtual DbSet<inv_StockRequest> inv_StockRequest { get; set; }
        public virtual DbSet<inv_StockRequestDetail> inv_StockRequestDetail { get; set; }
        public virtual DbSet<inv_StockStore> inv_StockStore { get; set; }
        public virtual DbSet<Inventory> Inventories { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<License> Licenses { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Make> Makes { get; set; }
        public virtual DbSet<Model> Models { get; set; }
        public virtual DbSet<Modifier> Modifiers { get; set; }
        public virtual DbSet<OrderCheckout> OrderCheckouts { get; set; }
        public virtual DbSet<OrderCheckoutDetail> OrderCheckoutDetails { get; set; }
        public virtual DbSet<OrderDetail> OrderDetails { get; set; }
        public virtual DbSet<OrderDetail_FM> OrderDetail_FM { get; set; }
        public virtual DbSet<OrderInspectionMapping> OrderInspectionMappings { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<OrdersChecklist> OrdersChecklists { get; set; }
        public virtual DbSet<Receipt> Receipts { get; set; }
        public virtual DbSet<ReportLog> ReportLogs { get; set; }
        public virtual DbSet<Role_Forms> Role_Forms { get; set; }
        public virtual DbSet<Role_Group> Role_Group { get; set; }
        public virtual DbSet<Role_GroupForms> Role_GroupForms { get; set; }
        public virtual DbSet<SessionInfo> SessionInfoes { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<Store> Stores { get; set; }
        public virtual DbSet<SubCategory> SubCategories { get; set; }
        public virtual DbSet<SubUser> SubUsers { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<TimeZone> TimeZones { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual ObjectResult<sp_apiGetSuperUserInfo_Result> sp_apiGetSuperUserInfo(string companyCode)
        {
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_apiGetSuperUserInfo_Result>("sp_apiGetSuperUserInfo", companyCodeParameter);
        }
    
        public virtual ObjectResult<string> sp_apiUserInfo_LoginV2(Nullable<int> subUserPasscode, string companyCode, string ticks)
        {
            var subUserPasscodeParameter = subUserPasscode.HasValue ?
                new ObjectParameter("SubUserPasscode", subUserPasscode) :
                new ObjectParameter("SubUserPasscode", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var ticksParameter = ticks != null ?
                new ObjectParameter("Ticks", ticks) :
                new ObjectParameter("Ticks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_apiUserInfo_LoginV2", subUserPasscodeParameter, companyCodeParameter, ticksParameter);
        }
    
        public virtual ObjectResult<sp_GetCarOrderDetail_App_Result> sp_GetCarOrderDetail_App(string carID)
        {
            var carIDParameter = carID != null ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCarOrderDetail_App_Result>("sp_GetCarOrderDetail_App", carIDParameter);
        }
    
        public virtual ObjectResult<sp_GetCarOrders_App_Result> sp_GetCarOrders_App(string carID, Nullable<int> customerID)
        {
            var carIDParameter = carID != null ?
                new ObjectParameter("CarID", carID) :
                new ObjectParameter("CarID", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCarOrders_App_Result>("sp_GetCarOrders_App", carIDParameter, customerIDParameter);
        }
    
        public virtual int sp_InsertItems(Nullable<int> categoryID, Nullable<int> subCatID, string name, string description, string barcode, string sKU, string itemImage, Nullable<int> displayOrder, Nullable<bool> sortByAlpha, Nullable<double> price, string itemType, Nullable<int> unitID, string lastUpdatedBy, Nullable<System.DateTime> lastUpdatedDate, Nullable<int> statusID, string companyCode, Nullable<int> locationID, Nullable<bool> retail, string nameOnReceipt)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var subCatIDParameter = subCatID.HasValue ?
                new ObjectParameter("SubCatID", subCatID) :
                new ObjectParameter("SubCatID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var itemImageParameter = itemImage != null ?
                new ObjectParameter("ItemImage", itemImage) :
                new ObjectParameter("ItemImage", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var sortByAlphaParameter = sortByAlpha.HasValue ?
                new ObjectParameter("SortByAlpha", sortByAlpha) :
                new ObjectParameter("SortByAlpha", typeof(bool));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var lastUpdatedByParameter = lastUpdatedBy != null ?
                new ObjectParameter("LastUpdatedBy", lastUpdatedBy) :
                new ObjectParameter("LastUpdatedBy", typeof(string));
    
            var lastUpdatedDateParameter = lastUpdatedDate.HasValue ?
                new ObjectParameter("LastUpdatedDate", lastUpdatedDate) :
                new ObjectParameter("LastUpdatedDate", typeof(System.DateTime));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var retailParameter = retail.HasValue ?
                new ObjectParameter("Retail", retail) :
                new ObjectParameter("Retail", typeof(bool));
    
            var nameOnReceiptParameter = nameOnReceipt != null ?
                new ObjectParameter("NameOnReceipt", nameOnReceipt) :
                new ObjectParameter("NameOnReceipt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_InsertItems", categoryIDParameter, subCatIDParameter, nameParameter, descriptionParameter, barcodeParameter, sKUParameter, itemImageParameter, displayOrderParameter, sortByAlphaParameter, priceParameter, itemTypeParameter, unitIDParameter, lastUpdatedByParameter, lastUpdatedDateParameter, statusIDParameter, companyCodeParameter, locationIDParameter, retailParameter, nameOnReceiptParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_InsertLocation(string name, string descripiton, string address, string contactNo, string email, Nullable<int> timeZoneID, string countryID, Nullable<int> cityID, Nullable<int> userID, string licenseNo, string longitude, string latitude, Nullable<bool> deliveryServices, Nullable<double> deliveryCharges, string deliveryTime, Nullable<double> minOrderAmount, string lastUpdatedBy, Nullable<System.DateTime> lastUpdatedDate, Nullable<int> statusID, string companyCode, Nullable<System.DateTime> open_Time, Nullable<System.DateTime> close_Time)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descripitonParameter = descripiton != null ?
                new ObjectParameter("Descripiton", descripiton) :
                new ObjectParameter("Descripiton", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var timeZoneIDParameter = timeZoneID.HasValue ?
                new ObjectParameter("TimeZoneID", timeZoneID) :
                new ObjectParameter("TimeZoneID", typeof(int));
    
            var countryIDParameter = countryID != null ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var licenseNoParameter = licenseNo != null ?
                new ObjectParameter("LicenseNo", licenseNo) :
                new ObjectParameter("LicenseNo", typeof(string));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var deliveryServicesParameter = deliveryServices.HasValue ?
                new ObjectParameter("DeliveryServices", deliveryServices) :
                new ObjectParameter("DeliveryServices", typeof(bool));
    
            var deliveryChargesParameter = deliveryCharges.HasValue ?
                new ObjectParameter("DeliveryCharges", deliveryCharges) :
                new ObjectParameter("DeliveryCharges", typeof(double));
    
            var deliveryTimeParameter = deliveryTime != null ?
                new ObjectParameter("DeliveryTime", deliveryTime) :
                new ObjectParameter("DeliveryTime", typeof(string));
    
            var minOrderAmountParameter = minOrderAmount.HasValue ?
                new ObjectParameter("MinOrderAmount", minOrderAmount) :
                new ObjectParameter("MinOrderAmount", typeof(double));
    
            var lastUpdatedByParameter = lastUpdatedBy != null ?
                new ObjectParameter("LastUpdatedBy", lastUpdatedBy) :
                new ObjectParameter("LastUpdatedBy", typeof(string));
    
            var lastUpdatedDateParameter = lastUpdatedDate.HasValue ?
                new ObjectParameter("LastUpdatedDate", lastUpdatedDate) :
                new ObjectParameter("LastUpdatedDate", typeof(System.DateTime));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var open_TimeParameter = open_Time.HasValue ?
                new ObjectParameter("Open_Time", open_Time) :
                new ObjectParameter("Open_Time", typeof(System.DateTime));
    
            var close_TimeParameter = close_Time.HasValue ?
                new ObjectParameter("Close_Time", close_Time) :
                new ObjectParameter("Close_Time", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_InsertLocation", nameParameter, descripitonParameter, addressParameter, contactNoParameter, emailParameter, timeZoneIDParameter, countryIDParameter, cityIDParameter, userIDParameter, licenseNoParameter, longitudeParameter, latitudeParameter, deliveryServicesParameter, deliveryChargesParameter, deliveryTimeParameter, minOrderAmountParameter, lastUpdatedByParameter, lastUpdatedDateParameter, statusIDParameter, companyCodeParameter, open_TimeParameter, close_TimeParameter);
        }
    
        public virtual ObjectResult<sp_SearchItems_Result> sp_SearchItems(Nullable<int> itemID, string companyCode, Nullable<int> locationID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SearchItems_Result>("sp_SearchItems", itemIDParameter, companyCodeParameter, locationIDParameter);
        }
    
        public virtual ObjectResult<sp_SearchLocation_Result> sp_SearchLocation(Nullable<int> locationID, Nullable<int> userID, string companyCode)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SearchLocation_Result>("sp_SearchLocation", locationIDParameter, userIDParameter, companyCodeParameter);
        }
    
        public virtual int sp_UpdateItems(Nullable<int> itemID, Nullable<int> categoryID, Nullable<int> subCatID, string name, string description, string barcode, string sKU, string itemImage, Nullable<int> displayOrder, Nullable<bool> sortByAlpha, Nullable<double> price, string itemType, Nullable<int> unitID, string lastUpdatedBy, Nullable<System.DateTime> lastUpdatedDate, Nullable<int> statusID, string companyCode, Nullable<int> locationID, string nameOnReceipt)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            var subCatIDParameter = subCatID.HasValue ?
                new ObjectParameter("SubCatID", subCatID) :
                new ObjectParameter("SubCatID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var barcodeParameter = barcode != null ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(string));
    
            var sKUParameter = sKU != null ?
                new ObjectParameter("SKU", sKU) :
                new ObjectParameter("SKU", typeof(string));
    
            var itemImageParameter = itemImage != null ?
                new ObjectParameter("ItemImage", itemImage) :
                new ObjectParameter("ItemImage", typeof(string));
    
            var displayOrderParameter = displayOrder.HasValue ?
                new ObjectParameter("DisplayOrder", displayOrder) :
                new ObjectParameter("DisplayOrder", typeof(int));
    
            var sortByAlphaParameter = sortByAlpha.HasValue ?
                new ObjectParameter("SortByAlpha", sortByAlpha) :
                new ObjectParameter("SortByAlpha", typeof(bool));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(double));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            var unitIDParameter = unitID.HasValue ?
                new ObjectParameter("UnitID", unitID) :
                new ObjectParameter("UnitID", typeof(int));
    
            var lastUpdatedByParameter = lastUpdatedBy != null ?
                new ObjectParameter("LastUpdatedBy", lastUpdatedBy) :
                new ObjectParameter("LastUpdatedBy", typeof(string));
    
            var lastUpdatedDateParameter = lastUpdatedDate.HasValue ?
                new ObjectParameter("LastUpdatedDate", lastUpdatedDate) :
                new ObjectParameter("LastUpdatedDate", typeof(System.DateTime));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var nameOnReceiptParameter = nameOnReceipt != null ?
                new ObjectParameter("NameOnReceipt", nameOnReceipt) :
                new ObjectParameter("NameOnReceipt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateItems", itemIDParameter, categoryIDParameter, subCatIDParameter, nameParameter, descriptionParameter, barcodeParameter, sKUParameter, itemImageParameter, displayOrderParameter, sortByAlphaParameter, priceParameter, itemTypeParameter, unitIDParameter, lastUpdatedByParameter, lastUpdatedDateParameter, statusIDParameter, companyCodeParameter, locationIDParameter, nameOnReceiptParameter);
        }
    
        public virtual int sp_UpdateLocation(Nullable<int> locationID, string name, string descripiton, string address, string contactNo, string email, Nullable<int> timeZoneID, string countryID, Nullable<int> cityID, Nullable<int> userID, string longitude, string latitude, string industryType, Nullable<bool> deliveryServices, Nullable<double> deliveryCharges, string deliveryTime, Nullable<double> minOrderAmount, string lastUpdatedBy, Nullable<System.DateTime> lastUpdatedDate, Nullable<int> statusID, string companyCode, Nullable<System.DateTime> open_Time, Nullable<System.DateTime> close_Time)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("LocationID", locationID) :
                new ObjectParameter("LocationID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var descripitonParameter = descripiton != null ?
                new ObjectParameter("Descripiton", descripiton) :
                new ObjectParameter("Descripiton", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var timeZoneIDParameter = timeZoneID.HasValue ?
                new ObjectParameter("TimeZoneID", timeZoneID) :
                new ObjectParameter("TimeZoneID", typeof(int));
    
            var countryIDParameter = countryID != null ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(string));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var longitudeParameter = longitude != null ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(string));
    
            var latitudeParameter = latitude != null ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(string));
    
            var industryTypeParameter = industryType != null ?
                new ObjectParameter("IndustryType", industryType) :
                new ObjectParameter("IndustryType", typeof(string));
    
            var deliveryServicesParameter = deliveryServices.HasValue ?
                new ObjectParameter("DeliveryServices", deliveryServices) :
                new ObjectParameter("DeliveryServices", typeof(bool));
    
            var deliveryChargesParameter = deliveryCharges.HasValue ?
                new ObjectParameter("DeliveryCharges", deliveryCharges) :
                new ObjectParameter("DeliveryCharges", typeof(double));
    
            var deliveryTimeParameter = deliveryTime != null ?
                new ObjectParameter("DeliveryTime", deliveryTime) :
                new ObjectParameter("DeliveryTime", typeof(string));
    
            var minOrderAmountParameter = minOrderAmount.HasValue ?
                new ObjectParameter("MinOrderAmount", minOrderAmount) :
                new ObjectParameter("MinOrderAmount", typeof(double));
    
            var lastUpdatedByParameter = lastUpdatedBy != null ?
                new ObjectParameter("LastUpdatedBy", lastUpdatedBy) :
                new ObjectParameter("LastUpdatedBy", typeof(string));
    
            var lastUpdatedDateParameter = lastUpdatedDate.HasValue ?
                new ObjectParameter("LastUpdatedDate", lastUpdatedDate) :
                new ObjectParameter("LastUpdatedDate", typeof(System.DateTime));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var open_TimeParameter = open_Time.HasValue ?
                new ObjectParameter("Open_Time", open_Time) :
                new ObjectParameter("Open_Time", typeof(System.DateTime));
    
            var close_TimeParameter = close_Time.HasValue ?
                new ObjectParameter("Close_Time", close_Time) :
                new ObjectParameter("Close_Time", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateLocation", locationIDParameter, nameParameter, descripitonParameter, addressParameter, contactNoParameter, emailParameter, timeZoneIDParameter, countryIDParameter, cityIDParameter, userIDParameter, longitudeParameter, latitudeParameter, industryTypeParameter, deliveryServicesParameter, deliveryChargesParameter, deliveryTimeParameter, minOrderAmountParameter, lastUpdatedByParameter, lastUpdatedDateParameter, statusIDParameter, companyCodeParameter, open_TimeParameter, close_TimeParameter);
        }
    
        [DbFunction("Garage_UATEntities", "Split")]
        public virtual IQueryable<string> Split(string inputString, string delimiter)
        {
            var inputStringParameter = inputString != null ?
                new ObjectParameter("InputString", inputString) :
                new ObjectParameter("InputString", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[Garage_UATEntities].[Split](@InputString, @Delimiter)", inputStringParameter, delimiterParameter);
        }
    }
}
